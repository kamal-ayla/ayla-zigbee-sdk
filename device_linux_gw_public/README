Ayla Device Client

	Copyright 2011-2018 Ayla Networks, Inc.  All rights reserved.

Release notes:
	0.2-beta
		- Initial version for Linux desktop / OpenWRT
	0.3-beta
		- Fix multiple memory leaks. add watchdog for devd/appd.
		- Add an external tool to help with testing server pages
		  on apache
	0.4-beta
		- Add schedule feature
		- Add script for manufacturing
		- Cleanup and refactoring
	0.5-beta
		- Reply back with 403 if acgi request is not on same LAN
	0.5.1-beta
		- Support for dynamic schedules, fix ANS bug
	0.6-beta
		- Add support for file properties, merge in log daemon
	0.6.1-beta
		- Split lib/ayla to have external header files and
		  internal files
		- Rename prop types to PROP_BOOL, PROP_INTEGER instead
		  of ATLVs
	0.6.2-beta
		- Add 'make install' targets
		- Handle server override message
		- Update gw_setup script to support multiple regions
		- Restructure/cleanup appd props library
		- Add config_gen tool
	0.7-beta
		- Add Wi-Fi connection manager daemon 'cond'
		- Add command-line interface acli for testing and script
		  access
		- Support wifi-related JSON requests in devd and acgi
	0.8-beta
		- Updated property api
		- Enhanced simultaneous AP-station mode support in cond
		- Moved sched subsystem inside the props library
		- Added ability for properties to be sent to specific
		  destinations
	0.9-beta
		- Updated property API
		- Improved confirm and ads fail handlers to also include
		  the values of the properties that failed
		- Add ability to include timestamps on property updates
		- Add Batching feature
	0.9.1-beta
		- Add factory reset support.
		- Add support for having separate startup and factory
		  config dirs
		- Rename "respond_handler" to "get"
		- Add a stub OTA program
		- Update cert
	0.9.2-beta
		- Add node ota functionality (GG)
	0.9.3-beta
		- Fix and enhance conf file handling
		- Fix logd config file monitoring
		- Fix file property send failure/recovery
	0.9.4-beta
		- Add new cert for Amazon S3 service
		- Fix bugs relating to batch properties
		- Fix status.json and wifi_status.json format
		- Improve appd cloud event handling
		- Build improvements for cross compilation
		- Devd performance and reliability improvements
		- Fix and improve factory reset support
		- Minor fixes to cond
	0.9.5-beta
		- New Wi-Fi setup state machine and platform interface
		- Additional Wi-Fi setup configuration
		- Wi-Fi setup bug fixes
		- Timer and schedule fixes
		- Support for test connnections to ADS
		- Performance and reliability improvements
	1.0
		- Add LAN OTA functionality
		- All modules use package version
		- Add config_gen option to omit generating a mfg log
		- Add gatewayd generic gateway demo app and node simulator
		- Add appd library features incl. client event callback
		- Cleanup debug messages
		- Improvements to TYPE=RELEASE builds
		- Code cleanup and performance enhancements
	1.1
		- Add from-device datapoint metadata support
		- Enable secure Wi-Fi setup with mobile app
		- Minor Wi-Fi setup fixes and features
		- Acli enhancements: help commands, remote config access to
		  modules that allow it, more flexible DHCP client events for
		  multi-interface systems, and debug and custom socket options
		- Library enhancements for better performance and functionality
		- Update LAN OTA for revised header spec
	1.1.1
		- Support LAN OTA v1 header format
		- Service devd request queue when network interface is down
		- Support APs on 5GHz bands in Wi-Fi scan results
		- Minor Wi-Fi setup fixes and improvements
		- Raspberry Pi dev kit script (ayla_install & apply_ota) improvements
		- Better notifier client error recovery
		- Fix devd crash sending gateway node conn_status when ADS down
	1.2
		- Platform library reorg for improved flexibility and ease of implementation
		- Added hook for platform-specific crypto implementation
		- Added hook for platform-specific device ID loading
		- Added Mediatek mt7688 demo Wi-Fi platform implementation
		- Improved logd syslog message parsing
		- General performance, reliability, and security improvements
	1.3
		- Add lib/app to simplify creating application daemons
		- Additional controls exposed to appd including:
		  updating setup token, devd config access (can set OEM model
		  and Region), push-button registration, registration and reg-
		  token updates, and global factory reset.
		- Deprecate special oem_host_version property to set template
		  version.  Template version now set via app library interface.
		- Significant devd rework with improved cloud request performance,
		  smarter error handling, and better responsiveness to changes
		  in device connectivity.
	1.4
		- Add app/bt_gatewayd Bluetooth Gateway demo application
		- Project directory tree re-organization
		- Fix devd bad state on connectivity loss when using Curl lib
		  that does not support AsynchDNS.
		- Miscellaneous fixes and enhancements
	1.5
		- Add app/zb_gatewayd ZigBee Gateway demo application
		- Add app/multi_gatewayd Multi-protocol Gateway demo application
		- Fix Appd cannot receive commands from Ayla cloud
		- Fix Appd crash when cancel pair on bluetooth device
		- Fix Devd crash when try to get node prop/node connect status
		- Fix prop_resp path error in lan mode
		- Fix the device cannot connect to insecure AP during Wi-Fi setup
		- Fix Zigbee stack abnormal when two appd connect to devd
		- Update bluez version to 5.49
		- Update BLE node magic blue bulb properties
	1.5.1
		- Update BLE gateway properties
		- Fix BLE node factory reset failed issue
		- Use batch_send to send ads_failure properties when cloud connection recovery
	1.5.2
		- Update BLE gateway bt_connect_result property
		- Update BLE magic blue bulb node properties
		- Fix BLE gateway memory double free issue
	1.6
		- Add BLE WiFi setup feature
		- Improve onboarding flow
	1.7
		- Fix remove node error issue
		- Update install script to use ssl new version
		- Fix log cannot send to cloud issue
		- Add large message prop type support


Tree contents

	lib/ayla - common routines used by Ayla daemons.
	
	lib/app - framework to allow the easy creation of a cloud connected
		application.  Includes libraries to handle communication with
		devd, queuing of pending commands, property management,
		schedule management, and optional generic gateway support.
	
	lib/platform - platform-specific library used by Ayla daemons.
		Generic implementations of functions defined in platform.h are
		located in lib/platform/generic/.  To override these with custom
		implementations, create a product-specific subdirectory named
		lib/platform/<PROD>/ and create your product-specific .c files
		in that directory.

	daemon/devd - cloud client daemon.
		This daemon provides the following features:
		* Ayla Device Service (ADS) client
		* Ayla Notification Service (ANS) client
		* Internal HTTP server for JSON interface requests
		* mDNS responder for address requests for DSN hostnames
		* LAN mode interface for communication with Ayla mobile apps
		* IPC interfaces for internal messaging with other Ayla daemons
		
	daemon/cond - Wi-Fi connection manager.
		This daemon enables Ayla Wi-Fi Setup functionality and provides
		an abstraction layer between Ayla modules and the Wi-Fi driver.
		Cond manages scan results and network profiles, configures AP mode,
		and establishes connections to Wi-Fi access points.  Cond is
		an optional component and may be omitted if the Ayla Wi-Fi Setup
		solution is not needed.
		
	daemon/logd - Ayla logging client.
		All Ayla daemons write specially tagged log messages to Syslog.
		This daemon parses syslog output, filters messages based on log
		config managed by devd, and posts them to the Ayla logging service.
		Logd can be remotely enabled and configured for monitoring and debugging.
		Logd is an optional component and may be omitted if remote logging
		functionality is not desired.

	app/appd - client application.
		This directory contains code for a basic device application
		demonstrating how to define properties, manage datapoints, and
		use other features provided in the Ayla library.  It can be used
		as a model when starting to develop a cloud-connected application.
		This application expects the device to advertise the following
		OEM model: linuxex1
	
	app/gatewayd - generic gateway application.
		This directory contains code for a gateway application, generic
		node management engine, and a node simulator.  This may
		be built as an alternative to appd when testing and developing a
		generic gateway.  It should be used as a model when starting to
		develop a cloud-connected gateway application.
		This application expects the device to advertise the following
		OEM model: ggdemo
		Note: gateway-specific code is ONLY included in the AGW version
		of source packages.
	
	app/bt_gatewayd - Bluetooth gateway application.
		This directory contains code for a Bluetooth gateway application.
		Only support to run in raspbian system on PI3 board.
	
	app/zb_gatewayd - ZigBee gateway application.
		This directory contains code for a ZigBee gateway application.
		Only support to run in raspbian system on PI3 board
		with CEL EM3588 USB Stick board/Silicon labs Ember ZigBee protocol stack.
	
	app/multi_gatewayd - Multi-protocol gateway application.
		This directory contains code for a Multi-protocol gateway application.
		Only support to run in raspbian system on PI3 board
		with CEL EM3588 USB Stick board/Silicon labs Ember ZigBee protocol stack.
	
	util/ota - Ayla over-the-air firmware image downloader.
		ota_update is a utility to download, verify, and apply a Host OTA image.
		For ota_update to be fully functional, the OTA-related platform-specific
		functions must be implemented in the lib/platform library. 
	
	util/acli - command line interface
		Simple utility to query and control Ayla daemons.  Acli may be
		used for system management (e.g. notifying Ayla daemons about
		DHCP client events), as well as for debugging.  Supported functionality
		includes generating system event notifications, querying status from
		various Ayla daemons, getting and setting daemon configuration,
		and making HTTP requests to the internal web server.

	util/acgi - HTTP proxy.
		A CGI utility intended to be executed by the device's primary
		web server.  The web server should be configured to run acgi
		to handle all incoming .json requests.  Acgi parses each request
		and forwards valid requests to devd, which handles them using
		its internal web server.  This component is required in order to
		support LAN mode, Wi-Fi Setup, and Same-LAN registration.

	util/devdwatch - devd watchdog.
		A simple launcher for devd.  If devd crashes, the watchdog will
		automatically restart it.  If available, it is recommended to
		use the system's process-restarting functionality instead of devdwatch.
		See the systemd "Restart" option for details.	


Build notes

	Install Prerequisites:  the following packages and libraries are needed.

		libjansson-dev			- JSON parser library (2.7 or later)
		libcurl4-openssl-dev	- HTTP accesses (7.20.0 or later w/ AsynchDNS)
		openssl					- Crypto library (1.0.1 or later)
		lighttpd				- or similar HTTP server for acgi
		libglib2.0-dev		- glib dev library for bluez
		libudev-dev			- udev dev library for bluez
		libreadline6-dev	- readline dev library for bluez
		libical-dev			- ical dev library for bluez
		libdbus-1-dev		- dbus dev library for bluez
		bluez				- bluez library for Bluetooth gateway, 
		                      should build from 5.44+ source code
		libreadline-dev		- readline dev library for EmberZNet
		libncurses-dev		- ncurses dev library for EmberZNet
		EmberZNet			- ZigBee protocol stack from siliconlabs for ZigBee 
		                      gateway, the stack version should be 5.7.4.0


Configuration

	All Ayla daemons load their factory default config from a JSON config file
	specified with a "-c" command line option.  When config is updated, daemons
	create a working copy of the config file with ".startup" appended to the
	factory config file name.  See the "Device Application for Linux" manual
	for more details.
	
	In order to connect to the Ayla cloud, devd requires a factory configuration
	file with a unique device serial number (DSN) and public key.  The default
	name for this config file is devd.conf.  This file must be requested from your
	assigned Ayla support representative, generated using the config_gen tool,
	or provisioned on the device using the gw_setup_agent command line utility.
