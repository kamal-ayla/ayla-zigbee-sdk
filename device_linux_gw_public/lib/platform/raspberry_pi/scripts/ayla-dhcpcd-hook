# Copyright 2016-2018 Ayla Networks, Inc.  All rights reserved.
#
# Use of the accompanying software is permitted only in accordance
# with and subject to the terms of the Software License Agreement
# with Ayla Networks, Inc., a copy of which can be obtained from
# Ayla Networks, Inc.

# dhcpcd hook script to invoke acli to forward DHCP events to Ayla services.
# This script is customized for a Raspberry Pi setup using ayla_install.sh.
#
# This script performs basic management of DHCP client events, prioritizing
# Ethernet over Wi-Fi.  Cond only needs events from the Wi-Fi interface.
#

# Ethernet interface
ETH_IF="eth0"
# Wi-Fi interface
WIFI_IF="wlan0"

# Check for acli in the PATH
acli=$(which acli)

# If not in the PATH, use the default binary install location
if [ -z "$acli" ]; then
	acli=/home/pi/ayla/bin/acli
fi

log() {
	logger -p user.info -t ayla-dhcpcd-hook "$*"
}

#
# Checks if the specified network interface has an IP address
#
check_if_addr() {
	local interface="$1"

	ifconfig $interface | grep "inet " >/dev/null 2>&1
}

#
# Performs action when an IP address is acquired via DHCP.
#
dhcp_up() {
	local interface="$1"

	case $interface in
		$ETH_IF)
			log "$interface up"
			check_if_addr $WIFI_IF
			if [ $? -eq 0 ]; then
				# Swapping from Wi-Fi to Ethernet: reconnect devd
				$acli event dhcp_refresh $interface devd
			else
				$acli event dhcp_bound $interface devd
			fi
		;;
		$WIFI_IF)
			log "$interface up"
			check_if_addr $ETH_IF
			if [ $? -ne 0 ]; then
				# Only send event to devd if Ethernet is not up
				$acli event dhcp_bound $interface devd
			fi
			$acli event dhcp_bound $interface cond
		;;
		*)
			log "$interface not handled"
	esac
}

#
# Performs action when an IP address removed
#
dhcp_down() {
	local interface="$1"

	case $interface in
		$ETH_IF)
			log "$interface down"
			check_if_addr $WIFI_IF
			if [ $? -eq 0 ]; then
				# Swapping from Ethernet to Wi-Fi: reconnect devd
				$acli event dhcp_refresh $interface devd
			else
				$acli event dhcp_deconfig $interface devd
			fi
		;;
		$WIFI_IF)
			log "$interface down"
			check_if_addr $ETH_IF
			if [ $? -ne 0 ]; then
				# Only send event to devd if Ethernet is not up
				$acli event dhcp_deconfig $interface devd
			fi
			$acli event dhcp_deconfig $interface cond
		;;
		*)
			log "$interface not handled"
	esac
}

#
# Performs action when an IP address is changed
#
dhcp_refresh() {
	local interface="$1"

	case $interface in
		$ETH_IF)
			log "$interface refresh"
			$acli event dhcp_refresh $interface devd
		;;
		$WIFI_IF)
			log "$interface refresh"
			check_if_addr $ETH_IF
			if [ $? -ne 0 ]; then
				# Only send event to devd if Ethernet is not up
				$acli event dhcp_refresh $interface devd
			fi
			$acli event dhcp_refresh $interface cond
		;;
		*)
			log "$interface not handled"
	esac
}

# Handle events generated by dhcpcd
case "$reason" in
	BOUND|RENEW|REBOOT)
		dhcp_up "$interface"
	;;
	REBIND|INFORM)
		dhcp_refresh "$interface"
	;;
	EXPIRE|NAK|NOCARRIER|DEPARTED)
		dhcp_down "$interface"
	;;
	STATIC)
		dhcp_up "$interface"
	;;
	*)
esac

exit 0
