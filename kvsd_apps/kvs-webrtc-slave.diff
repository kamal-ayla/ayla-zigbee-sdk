diff --git a/samples/kvsWebRTCClientMasterGstreamerSample.c b/samples/kvsWebRTCClientMasterGstreamerSample.c
index 185859bd5..f04f7a841 100644
--- a/samples/kvsWebRTCClientMasterGstreamerSample.c
+++ b/samples/kvsWebRTCClientMasterGstreamerSample.c
@@ -1,11 +1,84 @@
 #include "Samples.h"
 #include <gst/gst.h>
 #include <gst/app/gstappsink.h>
+#include <fcntl.h>
+#include <stdint.h>
+#include <stdio.h>
 
 extern PSampleConfiguration gSampleConfiguration;
+uint16_t port;
 
 // #define VERBOSE
 
+gboolean set_check_property(GstElement *object, const gchar *property_name, ...) {
+    GParamSpec *property_spec;
+    va_list args;
+
+    if(object == NULL)
+    {
+        printf("Error: Invalid GObject: NULL\n");
+        return FALSE;
+    }
+
+    // Check if the object is valid
+    if (!GST_IS_ELEMENT(object)) {
+        printf("Error: Invalid GObject passed: %s\n", GST_OBJECT_NAME(object));
+        return FALSE;
+    }
+
+    // Check if the object has the property
+    property_spec = g_object_class_find_property(G_OBJECT_GET_CLASS(object), property_name);
+    if (!property_spec) {
+        printf("Error: Property %s does not exist for object %s.\n",
+               property_name, G_OBJECT_TYPE_NAME(object));
+        return FALSE;
+    }
+
+    // Set the property using g_object_set_valist
+    va_start(args, property_name);
+    g_object_set_valist(G_OBJECT(object), property_name, args);
+    va_end(args);
+
+    return TRUE;
+}
+
+
+static void print_state_for_all_elements(GstElement *container)
+{
+    GstIterator *it;
+    GValue item = G_VALUE_INIT;
+    GstState state;
+    const gchar *state_name;
+
+    it = gst_bin_iterate_elements(GST_BIN(container));
+
+    printf("WebRTC get all states:\n");
+    gboolean done = FALSE;
+    while (!done) {
+        switch (gst_iterator_next(it, &item)) {
+            case GST_ITERATOR_OK:
+            {
+                GstElement *element = GST_ELEMENT(g_value_get_object(&item));
+                gst_element_get_state(element, &state, NULL, GST_CLOCK_TIME_NONE);
+                state_name = gst_element_state_get_name(state);
+                printf("\tElement %s state: %s\n", GST_ELEMENT_NAME(element), state_name);
+                g_value_reset(&item);
+            }
+            break;
+            case GST_ITERATOR_RESYNC:
+                gst_iterator_resync(it);
+                break;
+            case GST_ITERATOR_ERROR:
+            case GST_ITERATOR_DONE:
+                done = TRUE;
+                break;
+        }
+    }
+
+    g_value_unset(&item);
+    gst_iterator_free(it);
+}
+
 GstFlowReturn on_new_sample(GstElement* sink, gpointer data, UINT64 trackid)
 {
     GstBuffer* buffer;
@@ -114,6 +187,98 @@ GstFlowReturn on_new_sample_audio(GstElement* sink, gpointer data)
     return on_new_sample(sink, data, DEFAULT_AUDIO_TRACK_ID);
 }
 
+static GMainLoop* loop = NULL;
+static gboolean
+master_bus_msg(GstBus* bus, GstMessage* msg, gpointer data)
+{
+    GstPipeline* pipeline = data;
+
+    printf("Bus message '%d': %s\n", GST_MESSAGE_TYPE (msg), GST_MESSAGE_TYPE_NAME (msg));
+
+    switch(GST_MESSAGE_TYPE (msg))
+    {
+        case GST_MESSAGE_ERROR:
+        {
+            GError* err;
+            gchar* dbg;
+
+            gst_message_parse_error(msg, &err, &dbg);
+            g_printerr("ERROR: %s\n", err->message);
+            if(dbg != NULL)
+            {
+                g_printerr("ERROR debug information: %s\n", dbg);
+            }
+
+            g_error_free(err);
+            g_free(dbg);
+
+            GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS (GST_BIN(pipeline),
+                                              GST_DEBUG_GRAPH_SHOW_ALL, "ipc.error");
+
+            g_main_loop_quit(loop);
+
+            break;
+        }
+        case GST_MESSAGE_WARNING:
+        {
+            GError* err;
+            gchar* dbg;
+
+            gst_message_parse_warning(msg, &err, &dbg);
+            g_printerr("WARNING: %s\n", err->message);
+            if(dbg != NULL)
+            {
+                g_printerr("WARNING debug information: %s\n", dbg);
+            }
+            g_error_free(err);
+            g_free(dbg);
+
+            GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS (GST_BIN(pipeline),
+                                              GST_DEBUG_GRAPH_SHOW_ALL, "ipc.warning");
+            break;
+        }
+        case GST_MESSAGE_ASYNC_DONE:
+            GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS (GST_BIN(pipeline),
+                                              GST_DEBUG_GRAPH_SHOW_ALL, "ipc.async-done");
+            break;
+        case GST_MESSAGE_BUFFERING:
+        {
+            gint percent;
+            gst_message_parse_buffering(msg, &percent);
+            g_print("Buffering (%3d%%)\r", percent);
+            break;
+        }
+        case GST_MESSAGE_LATENCY:
+        {
+            gst_bin_recalculate_latency(GST_BIN(pipeline));
+            break;
+        }
+        case GST_MESSAGE_EOS:
+            g_print("End of stream\n");
+            //            gst_element_set_state(GST_ELEMENT (pipeline), GST_STATE_NULL);
+            //            g_main_loop_quit(loop);
+            break;
+        case GST_MESSAGE_STATE_CHANGED:
+        {
+            if (GST_MESSAGE_SRC(msg) == GST_OBJECT(pipeline)) {
+                GstState old_state, new_state, pending_state;
+                gst_message_parse_state_changed(msg, &old_state, &new_state, &pending_state);
+
+                g_print("Element %s changed state from %s to %s.\n",
+                        GST_OBJECT_NAME(msg->src),
+                        gst_element_state_get_name(old_state),
+                        gst_element_state_get_name(new_state));
+            }
+
+            print_state_for_all_elements(GST_ELEMENT (pipeline));
+            break;
+        }
+        default:
+            break;
+    }
+    return TRUE;
+}
+
 PVOID sendGstreamerAudioVideo(PVOID args)
 {
     STATUS retStatus = STATUS_SUCCESS;
@@ -123,6 +288,8 @@ PVOID sendGstreamerAudioVideo(PVOID args)
     GError* error = NULL;
     PSampleConfiguration pSampleConfiguration = (PSampleConfiguration) args;
 
+    printf("\n\n====================================== sendGstreamerAudioVideo: 1 ======================================\n\n");
+
     if (pSampleConfiguration == NULL) {
         printf("[KVS GStreamer Master] sendGstreamerAudioVideo(): operation returned status code: 0x%08x \n", STATUS_NULL_ARG);
         goto CleanUp;
@@ -145,12 +312,22 @@ PVOID sendGstreamerAudioVideo(PVOID args)
     switch (pSampleConfiguration->mediaType) {
         case SAMPLE_STREAMING_VIDEO_ONLY:
             if (pSampleConfiguration->useTestSrc) {
-                pipeline = gst_parse_launch(
-                    "videotestsrc is-live=TRUE ! queue ! videoconvert ! video/x-raw,width=1280,height=720,framerate=30/1 ! "
-                    "x264enc bframes=0 speed-preset=veryfast bitrate=512 byte-stream=TRUE tune=zerolatency ! "
-                    "video/x-h264,stream-format=byte-stream,alignment=au,profile=baseline ! appsink sync=TRUE emit-signals=TRUE name=appsink-video",
-                    &error);
+
+                ////////// This is run when supplied only single agument with channel name
+
+                printf("\n\n====================================== sendGstreamerAudioVideo: 2 ======================================\n\n");
+
+                char pipeline_str[4096];
+                snprintf(pipeline_str, 4096,
+                         "udpsrc port=%u ! application/x-rtp,media=video,clock-rate=90000,encoding-name=H264,payload=96 ! rtph264depay ! "
+                         "video/x-h264,stream-format=byte-stream,alignment=au,profile=baseline ! appsink sync=TRUE emit-signals=TRUE name=appsink-video",
+                        port);
+
+                pipeline = gst_parse_launch(pipeline_str, &error);
+
+                gst_bus_add_watch(GST_ELEMENT_BUS (pipeline), master_bus_msg, pipeline);
             } else {
+                printf("\n\n====================================== sendGstreamerAudioVideo: 3 ======================================\n\n");
                 pipeline = gst_parse_launch(
                     "autovideosrc ! queue ! videoconvert ! video/x-raw,width=1280,height=720,framerate=[30/1,10000000/333333] ! "
                     "x264enc bframes=0 speed-preset=veryfast bitrate=512 byte-stream=TRUE tune=zerolatency ! "
@@ -161,6 +338,7 @@ PVOID sendGstreamerAudioVideo(PVOID args)
 
         case SAMPLE_STREAMING_AUDIO_VIDEO:
             if (pSampleConfiguration->useTestSrc) {
+                printf("\n\n====================================== sendGstreamerAudioVideo: 4 ======================================\n\n");
                 pipeline = gst_parse_launch("videotestsrc is-live=TRUE ! queue ! videoconvert ! video/x-raw,width=1280,height=720,framerate=30/1 ! "
                                             "x264enc bframes=0 speed-preset=veryfast bitrate=512 byte-stream=TRUE tune=zerolatency ! "
                                             "video/x-h264,stream-format=byte-stream,alignment=au,profile=baseline ! appsink sync=TRUE "
@@ -169,6 +347,7 @@ PVOID sendGstreamerAudioVideo(PVOID args)
                                             "audio/x-opus,rate=48000,channels=2 ! appsink sync=TRUE emit-signals=TRUE name=appsink-audio",
                                             &error);
             } else {
+                printf("\n\n====================================== sendGstreamerAudioVideo: 5 ======================================\n\n");
                 pipeline =
                     gst_parse_launch("autovideosrc ! queue ! videoconvert ! video/x-raw,width=1280,height=720,framerate=[30/1,10000000/333333] ! "
                                      "x264enc bframes=0 speed-preset=veryfast bitrate=512 byte-stream=TRUE tune=zerolatency ! "
@@ -206,14 +385,21 @@ PVOID sendGstreamerAudioVideo(PVOID args)
 
     gst_element_set_state(pipeline, GST_STATE_PLAYING);
 
-    /* block until error or EOS */
-    bus = gst_element_get_bus(pipeline);
-    msg = gst_bus_timed_pop_filtered(bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);
+    printf("Pipeline playing\n");
 
-    /* Free resources */
-    if (msg != NULL) {
-        gst_message_unref(msg);
-    }
+    loop = g_main_loop_new(NULL, FALSE);
+    g_main_loop_run(loop);
+
+    printf("Pipeline loop end\n");
+
+    /* block until error or EOS */
+//    bus = gst_element_get_bus(pipeline);
+//    msg = gst_bus_timed_pop_filtered(bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);
+//
+//    /* Free resources */
+//    if (msg != NULL) {
+//        gst_message_unref(msg);
+//    }
     gst_object_unref(bus);
     gst_element_set_state(pipeline, GST_STATE_NULL);
     gst_object_unref(pipeline);
@@ -335,6 +521,12 @@ CleanUp:
 
 INT32 main(INT32 argc, CHAR* argv[])
 {
+    if(argc != 3)
+    {
+        printf("Usage: %s <channel name> <port>\n", argv[0]);
+        return 1;
+    }
+
     STATUS retStatus = STATUS_SUCCESS;
     PSampleConfiguration pSampleConfiguration = NULL;
     PCHAR pChannelName;
@@ -376,29 +568,39 @@ INT32 main(INT32 argc, CHAR* argv[])
     pSampleConfiguration->customData = (UINT64) pSampleConfiguration;
     pSampleConfiguration->useTestSrc = FALSE;
     /* Initialize GStreamer */
-    gst_init(&argc, &argv);
+    gst_init(NULL, NULL);
     printf("[KVS Gstreamer Master] Finished initializing GStreamer\n");
 
-    if (argc > 2) {
-        if (STRCMP(argv[2], "video-only") == 0) {
-            pSampleConfiguration->mediaType = SAMPLE_STREAMING_VIDEO_ONLY;
-            printf("[KVS Gstreamer Master] Streaming video only\n");
-        } else if (STRCMP(argv[2], "audio-video") == 0) {
-            pSampleConfiguration->mediaType = SAMPLE_STREAMING_AUDIO_VIDEO;
-            printf("[KVS Gstreamer Master] Streaming audio and video\n");
-        } else {
-            printf("[KVS Gstreamer Master] Unrecognized streaming type. Default to video-only\n");
-        }
-    } else {
-        printf("[KVS Gstreamer Master] Streaming video only\n");
-    }
+//    if (argc > 2) {
+//        if (STRCMP(argv[2], "video-only") == 0) {
+//            pSampleConfiguration->mediaType = SAMPLE_STREAMING_VIDEO_ONLY;
+//            printf("[KVS Gstreamer Master] Streaming video only\n");
+//        } else if (STRCMP(argv[2], "audio-video") == 0) {
+//            pSampleConfiguration->mediaType = SAMPLE_STREAMING_AUDIO_VIDEO;
+//            printf("[KVS Gstreamer Master] Streaming audio and video\n");
+//        } else {
+//            printf("[KVS Gstreamer Master] Unrecognized streaming type. Default to video-only\n");
+//        }
+//    } else {
+//        printf("[KVS Gstreamer Master] Streaming video only\n");
+//    }
+//
+//    if (argc > 3) {
+//        if (STRCMP(argv[3], "testsrc") == 0) {
+//            printf("[KVS GStreamer Master] Using test source in GStreamer\n");
+//            pSampleConfiguration->useTestSrc = TRUE;
+//        }
+//    }
+
+    port = atoi(argv[2]);
+
+
+
+	pSampleConfiguration->useTestSrc = TRUE;
+	printf("======================================= TEST SRC =======================================\n");
+
+
 
-    if (argc > 3) {
-        if (STRCMP(argv[3], "testsrc") == 0) {
-            printf("[KVS GStreamer Master] Using test source in GStreamer\n");
-            pSampleConfiguration->useTestSrc = TRUE;
-        }
-    }
 
     switch (pSampleConfiguration->mediaType) {
         case SAMPLE_STREAMING_VIDEO_ONLY:
